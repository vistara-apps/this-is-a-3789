// Sharing utilities for incident data and emergency contacts
class SharingService {
  constructor() {
    this.supportedMethods = this.getSupportedSharingMethods()
  }

  getSupportedSharingMethods() {
    const methods = {
      webShare: 'navigator' in window && 'share' in navigator,
      sms: true, // SMS is universally supported via tel: links
      email: true, // Email is universally supported via mailto: links
      clipboard: 'navigator' in window && 'clipboard' in navigator,
      whatsapp: true, // WhatsApp Web API
      telegram: true // Telegram Web API
    }
    return methods
  }

  // Generate shareable incident summary
  generateIncidentSummary(incidentData, userState = null) {
    const timestamp = new Date(incidentData.timestamp).toLocaleString()
    const location = `${incidentData.latitude.toFixed(6)}, ${incidentData.longitude.toFixed(6)}`
    
    const summary = `üö® INCIDENT ALERT - RightsGuard

üìÖ Time: ${timestamp}
üìç Location: ${location}
üÜî Incident ID: ${incidentData.logId}
üì± Status: ${incidentData.status}

${incidentData.notes ? `üìù Notes: ${incidentData.notes}` : ''}

${incidentData.recordingUrl ? `üé• Recording: ${incidentData.recordingUrl}` : ''}

${userState ? `üìç State: ${userState}` : ''}

This alert was generated by RightsGuard - Know your rights, stay protected.

#RightsGuard #KnowYourRights #StaySafe`

    return summary
  }

  // Generate emergency alert message
  generateEmergencyAlert(incidentData, userState = null) {
    const timestamp = new Date(incidentData.timestamp).toLocaleString()
    const location = `${incidentData.latitude.toFixed(6)}, ${incidentData.longitude.toFixed(6)}`
    
    const alert = `üö® EMERGENCY ALERT

I am currently in a police interaction and need your awareness.

Time: ${timestamp}
Location: ${location}
Incident ID: ${incidentData.logId}

${incidentData.recordingUrl ? `Live recording: ${incidentData.recordingUrl}` : 'Recording in progress...'}

Please monitor this situation. If you don't hear from me within 30 minutes, please consider checking on my welfare.

Sent via RightsGuard emergency alert system.`

    return alert
  }

  // Share via Web Share API (if supported)
  async shareViaWebAPI(data) {
    if (!this.supportedMethods.webShare) {
      throw new Error('Web Share API not supported')
    }

    try {
      await navigator.share({
        title: 'RightsGuard Incident Alert',
        text: data.text,
        url: data.url || window.location.href
      })
      return { success: true, method: 'webshare' }
    } catch (error) {
      if (error.name === 'AbortError') {
        return { success: false, error: 'User cancelled sharing' }
      }
      throw error
    }
  }

  // Share via SMS
  shareViaSMS(phoneNumber, message) {
    const encodedMessage = encodeURIComponent(message)
    const smsUrl = `sms:${phoneNumber}?body=${encodedMessage}`
    
    try {
      window.open(smsUrl, '_blank')
      return { success: true, method: 'sms' }
    } catch (error) {
      throw new Error('Failed to open SMS application')
    }
  }

  // Share via Email
  shareViaEmail(email, subject, message) {
    const encodedSubject = encodeURIComponent(subject)
    const encodedMessage = encodeURIComponent(message)
    const emailUrl = `mailto:${email}?subject=${encodedSubject}&body=${encodedMessage}`
    
    try {
      window.open(emailUrl, '_blank')
      return { success: true, method: 'email' }
    } catch (error) {
      throw new Error('Failed to open email application')
    }
  }

  // Share via WhatsApp
  shareViaWhatsApp(phoneNumber, message) {
    const encodedMessage = encodeURIComponent(message)
    const whatsappUrl = phoneNumber 
      ? `https://wa.me/${phoneNumber}?text=${encodedMessage}`
      : `https://wa.me/?text=${encodedMessage}`
    
    try {
      window.open(whatsappUrl, '_blank')
      return { success: true, method: 'whatsapp' }
    } catch (error) {
      throw new Error('Failed to open WhatsApp')
    }
  }

  // Share via Telegram
  shareViaTelegram(message, url = null) {
    const encodedMessage = encodeURIComponent(message)
    const telegramUrl = url 
      ? `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodedMessage}`
      : `https://t.me/share/url?text=${encodedMessage}`
    
    try {
      window.open(telegramUrl, '_blank')
      return { success: true, method: 'telegram' }
    } catch (error) {
      throw new Error('Failed to open Telegram')
    }
  }

  // Copy to clipboard
  async copyToClipboard(text) {
    if (!this.supportedMethods.clipboard) {
      // Fallback for older browsers
      return this.fallbackCopyToClipboard(text)
    }

    try {
      await navigator.clipboard.writeText(text)
      return { success: true, method: 'clipboard' }
    } catch (error) {
      // Try fallback method
      return this.fallbackCopyToClipboard(text)
    }
  }

  // Fallback clipboard method
  fallbackCopyToClipboard(text) {
    try {
      const textArea = document.createElement('textarea')
      textArea.value = text
      textArea.style.position = 'fixed'
      textArea.style.left = '-999999px'
      textArea.style.top = '-999999px'
      document.body.appendChild(textArea)
      textArea.focus()
      textArea.select()
      
      const successful = document.execCommand('copy')
      document.body.removeChild(textArea)
      
      if (successful) {
        return { success: true, method: 'clipboard-fallback' }
      } else {
        throw new Error('Copy command failed')
      }
    } catch (error) {
      throw new Error('Failed to copy to clipboard')
    }
  }

  // Share to multiple contacts
  async shareToContacts(contacts, message, options = {}) {
    const results = []
    
    for (const contact of contacts) {
      try {
        let result
        
        if (contact.type === 'phone' || contact.type === 'sms') {
          result = this.shareViaSMS(contact.value, message)
        } else if (contact.type === 'email') {
          result = this.shareViaEmail(contact.value, options.subject || 'RightsGuard Alert', message)
        } else if (contact.type === 'whatsapp') {
          result = this.shareViaWhatsApp(contact.value, message)
        } else {
          // Default to SMS for phone numbers
          result = this.shareViaSMS(contact.value, message)
        }
        
        results.push({
          contact: contact.value,
          ...result
        })
      } catch (error) {
        results.push({
          contact: contact.value,
          success: false,
          error: error.message
        })
      }
    }
    
    return results
  }

  // Generate shareable link for incident
  generateShareableLink(incidentData) {
    const baseUrl = window.location.origin
    const params = new URLSearchParams({
      incident: incidentData.logId,
      timestamp: incidentData.timestamp,
      lat: incidentData.latitude,
      lng: incidentData.longitude
    })
    
    return `${baseUrl}/incident?${params.toString()}`
  }

  // Create emergency contact card
  createEmergencyContactCard(incidentData, userState) {
    return {
      title: 'RightsGuard Emergency Alert',
      summary: this.generateEmergencyAlert(incidentData, userState),
      shareableLink: this.generateShareableLink(incidentData),
      timestamp: new Date().toISOString(),
      incidentId: incidentData.logId
    }
  }

  // Validate contact information
  validateContact(contact) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    const phoneRegex = /^\+?[\d\s\-\(\)]+$/
    
    if (contact.type === 'email') {
      return emailRegex.test(contact.value)
    } else if (contact.type === 'phone' || contact.type === 'sms') {
      return phoneRegex.test(contact.value)
    }
    
    return true // Allow other types to pass through
  }
}

export default new SharingService()
